#+TITLE: Diversity Calculator
#+AUTHOR: Aaron Nielsen
#+EMAIL: @anielsen001
#+DATE: 2018-10-13

You can find a [[http://aanandprasad.com/diversity-calculator/?groupName=women&numSpeakers=10&populationPercentage=50][Diversity Calculator]] here. This calculator is very 
helpful. From the link:
#+BEGIN_QUOTE
This calculator was inspired by comments from Dave Wilkinson and Paul Battley, who modelled the probability distribution for male/female speaker balance based on a Poisson distribution and found that the likelihood of an unbiased selection process yielding a line-up with no women at all is far lower than intuition might suggest, and—depending on the numbers you plug in—can often be far lower than the likelihood of their over-representation. That is to say: in an unbiased selection, you’re significantly more likely to see more than the expected number of women than none at all.
#+END_QUOTE

This calculator relies on computing the Poisson distribution
using factorials.
\begin{equation}
\frac{n!}{i! (n-i)!} p^i * (1-p)^{n-i}
\end{equation}
where $n$ is the number of people selected, $i$ is the number of an 
underrepresented group 
selected and $p$ is the fraction of people in the underrepresented
group.

The issue with this is that the factorial function grows really fast
and if you compute it directly, then your will quickly exceed the maximum
value you can represent on your computer. There is a way around this, by
computing using the log probability and then converting back to 
probability after the computations are done. This will also allow you 
to use approximations for $$log(n!)$$ so that you don't have to compute
the factorial directly. 

I was taught Stirling's approximation in school:
\begin{equation}
\ln n! = n \ln n - n . 
\end{equation}
However, this approximation breaks down for small $n$. It turns out 
that there is another approximation by Ramanujan: 
\begin{equation}
\ln n! = n \ln n - n + \frac{\ln (n (1+4n(1+2n))) /}{6} + \frac{\ln\pi}{2}
\end{equation}
that is more accurate. 

I wrote a little python code to explore it
#+begin_src  python
function logfact(n) {
    if (n==0) return 1.0;

    // return the Ramanujan approximation for log(n!)
    var out = 0;
    out = n * Math.log( n ) - n +
	Math.log( n * (1 + 4*n*(1+2*n)))/6.0 +
	Math.log( Math.PI ) /2.0;
    return out;   
}
#+end_src

The python math module has a built in
factorial function that can be used for comparison.
